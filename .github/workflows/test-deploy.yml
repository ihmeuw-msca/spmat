name: test_deploy

on:
  workflow_dispatch:
    inputs:
      os:
        description: "OS matrix (comma-separated). Leave empty for default."
        required: false
        default: ""
      run_tests:
        description: "Run tests against each built wheel?"
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(inputs.os != '' && format('["{0}"]', inputs.os) || '["ubuntu-latest","windows-latest","macos-13","macos-latest"]') }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up host Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v3.1.4
        with:
          output-dir: wheelhouse
        env:
          # Prefer metadata-driven selection: [project] requires-python in pyproject.toml
          # CIBW_PROJECT_REQUIRES_PYTHON: ">=3.11"
          # Optional per-wheel tests
          CIBW_TEST_REQUIRES: ${{ inputs.run_tests && 'pytest' || '' }}
          CIBW_TEST_COMMAND: ${{ inputs.run_tests && 'pytest -q {project}/tests' || '' }}

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  collect_artifacts:
    name: Collect all artifacts (no publish)
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      # Download all wheel artifacts into a single dist/ folder
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      # Download sdist next to wheels
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - name: List outputs
        run: ls -lah dist
